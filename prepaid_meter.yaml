# ============================
#  Prepaid Electricity Meter
#  Home Assistant package
#  File: /config/packages/prepaid_meter.yaml
# ============================

input_number:
  prepaid_balance:
    name: Set Prepaid Balance (kWh)
    min: 0
    max: 100000
    step: 0.1
    mode: box
    unit_of_measurement: "kWh"

  grid_import_at_recharge:
    name: Grid Import at Recharge (kWh)
    min: 0
    max: 1000000
    step: 0.1
    mode: box
    unit_of_measurement: "kWh"

  low_balance_threshold:
    name: Low Balance Alert Threshold (kWh)
    min: 0
    max: 100000
    step: 0.1
    mode: box
    unit_of_measurement: "kWh"

input_datetime:
  last_recharge_time:
    name: Last Recharge Time
    has_date: true
    has_time: true

# One-click action in the UI to apply a recharge
input_button:
  recharge_now:
    name: Recharge Now

template:
  - sensor:
      # kWh used since you last recorded a recharge
      - name: "Energy Used Since Recharge"
        unique_id: prepaid_energy_used_since_recharge
        unit_of_measurement: "kWh"
        state: >-
          {% set current = states('sensor.inverter_total_grid_import_kwh') | float(0) %}
          {% set start = states('input_number.grid_import_at_recharge') | float(0) %}
          {% set used = (current - start) %}
          {{ (used if used > 0 else 0) | round(3) }}

      # Current remaining prepaid balance
      - name: "Current Balance"
        unique_id: prepaid_current_balance
        unit_of_measurement: "kWh"
        state: >-
          {% set balance = states('input_number.prepaid_balance') | float(0) %}
          {% set used = states('sensor.energy_used_since_recharge') | float(0) %}
          {{ (balance - used) | round(3) }}

      # Read-only display of the captured reference (so you don't accidentally edit it)
      - name: "Grid Import at Recharge (Display)"
        unique_id: prepaid_grid_import_display
        unit_of_measurement: "kWh"
        state: "{{ states('input_number.grid_import_at_recharge') | float(0) | round(3) }}"

automation:
  # Apply Recharge: press the button to capture reference & timestamp.
  - alias: "Prepaid: Apply Recharge (button)"
    id: prepaid_apply_recharge_button
    mode: single
    trigger:
      - platform: state
        entity_id: input_button.recharge_now
    condition: []
    action:
      # Capture the inverter's current total import as our new reference
      - service: input_number.set_value
        target:
          entity_id: input_number.grid_import_at_recharge
        data:
          value: "{{ states('sensor.inverter_total_grid_import_kwh') | float(0) }}"
      # Timestamp the recharge
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.last_recharge_time
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      # Confirm in UI
      - service: persistent_notification.create
        data:
          title: "Prepaid balance recorded"
          message: >-
            Prepaid balance set to {{ states('input_number.prepaid_balance') }} kWh.
            Grid import reference saved: {{ states('sensor.inverter_total_grid_import_kwh') }} kWh.
            Time: {{ states('input_datetime.last_recharge_time') }}.

  # Low balance alert (fires only when crossing from >= threshold to < threshold)
  - alias: "Prepaid: Low Balance Alert"
    id: prepaid_low_balance_alert
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.current_balance
    condition:
      - condition: template
        value_template: >-
          {% set current = states('sensor.current_balance') | float(999999) %}
          {% set threshold = states('input_number.low_balance_threshold') | float(0) %}
          {% set prev = (trigger.from_state.state if trigger.from_state else None) %}
          {% set prev_num = prev | float(999999) %}
          {{ (current < threshold) and (prev_num >= threshold) }}
    action:
      # 🔔 Mobile push (replace with your device service!)
      - service: notify.mobile_app_YOURDEVICE
        data:
          title: "⚠️ Prepaid Low Balance"
          message: >-
            Prepaid balance is {{ states('sensor.current_balance') }} kWh —
            below threshold of {{ states('input_number.low_balance_threshold') }} kWh.
      # Generic notify fallback
      - service: notify.notify
        data:
          title: "Prepaid Low Balance"
          message: >-
            Prepaid balance is {{ states('sensor.current_balance') }} kWh —
            below threshold of {{ states('input_number.low_balance_threshold') }} kWh.
      # Always show a persistent UI notification
      - service: persistent_notification.create
        data:
          title: "Low Prepaid Balance"
          message: >-
            Your prepaid balance is **{{ states('sensor.current_balance') }} kWh**.
            Please recharge.
          notification_id: "low_prepaid_balance_alert"
      # Optional: email (uncomment & change service if you have SMTP configured)
      # - service: notify.smtp
      #   data:
      #     title: "Prepaid Low Balance"
      #     message: "Prepaid balance is {{ states('sensor.current_balance') }} kWh."

  # Clear the persistent low-balance notification once balance rises above threshold
  - alias: "Prepaid: Clear Low Balance Notification"
    id: prepaid_clear_low_balance
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.current_balance
    condition:
      - condition: template
        value_template: >-
          {% set current = states('sensor.current_balance') | float(0) %}
          {% set threshold = states('input_number.low_balance_threshold') | float(0) %}
          {{ current > threshold }}
    action:
      - service: persistent_notification.dismiss
        data:
          notification_id: "low_prepaid_balance_alert"

# NOTE:
# - Replace sensor.inverter_total_grid_import_kwh with your inverter's cumulative grid import sensor if different.
# - Replace notify.mobile_app_YOURDEVICE with your actual mobile notify service name (Developer Tools → Services).
